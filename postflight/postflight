#!/usr/local/munki/munki-python
# encoding: utf-8
'''
Copyright (c) 2020, dataJAR Ltd.  All rights reserved.

     Redistribution and use in source and binary forms, with or without
     modification, are permitted provided that the following conditions are met:
             * Redistributions of source code must retain the above copyright
               notice, this list of conditions and the following disclaimer.
             * Redistributions in binary form must reproduce the above copyright
               notice, this list of conditions and the following disclaimer in the
               documentation and/or other materials provided with the distribution.
             * Neither data JAR Ltd nor the names of its contributors may be used to
               endorse or promote products derived from this software without specific
               prior written permission.

     THIS SOFTWARE IS PROVIDED BY DATA JAR LTD "AS IS" AND ANY
     EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     DISCLAIMED. IN NO EVENT SHALL DATA JAR LTD BE LIABLE FOR ANY
     DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
     ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

SUPPORT FOR THIS PROGRAM

    This program is distributed "as is" by DATA JAR LTD.
    For more information or support, please utilise the following resources:

    https://macadmins.slack.com/messages/jamjar
    https://macadmins.slack.com/messages/datajar
    https://github.com/dataJAR/jamJAR
'''


# Version
__version__ = '2.1'


# Standard imports
import logging
import logging.handlers
import os
import platform
import subprocess
import sys
import time
# pylint: disable=import-error,no-name-in-module
from CoreFoundation import (CFPreferencesAppSynchronize,
                            CFPreferencesCopyAppValue,
                            CFPreferencesGetAppIntegerValue,
                            CFPreferencesSetValue,
                            CFPreferencesSetAppValue,
                            kCFPreferencesAnyHost,
                            kCFPreferencesAnyUser)
# pylint: disable=import-error,no-name-in-module
from SystemConfiguration import SCDynamicStoreCopyConsoleUser


def main():
    ''' Main function. Check ManagedInstallReport to see if items installed, check against
        mainfest & alert if something installed or if we have installs pending '''

    jamjar_installs = []
    jamjar_uninstalls = []
    installed_items = 0
    removed_items = 0
    pending_apple_updates, pending_items = get_pending_items()

    # Get macOS version, borrowed from:
    # https://github.com/munki/munki/blob/master/code/client/munkilib/osutils.py#L47-L60
    os_version_tuple = tuple(map(int, platform.mac_ver()[0].split('.')))

    # If macOS 10.13 or below then sum PENDING_UPDATE_COUNT & PENDING_APPLE_UPDATES_COUNT
    # Borrowed from:
    # https://github.com/munki/munki/blob/code/client/munkilib/appleupdates/au.py#L497-L518
    if os_version_tuple <= (10, 13):
        pending_items += pending_apple_updates
    else:
        # 10.14+, process apple updates now so inherent delay before other notifications etc
        process_pending_apple_updates(pending_apple_updates)

    # Get items in the LocalOnlyManifests managed_installs array
    if CLIENT_MANIFEST.get('managed_installs'):
        for items in CLIENT_MANIFEST.get('managed_installs'):
            jamjar_installs.append(items)

    # Get items in the LocalOnlyManifests managed_uninstalls array
    if CLIENT_MANIFEST.get('managed_uninstalls'):
        for items in CLIENT_MANIFEST.get('managed_uninstalls'):
            jamjar_uninstalls.append(items)

    # Process installs, uninstalls & pending items.. via their functions & log
    jamjar_installs, installed_items = process_installs(jamjar_installs, installed_items)
    jamjar_uninstalls, removed_items = process_uninstalls(jamjar_uninstalls, removed_items)
    process_pending(pending_items)
    warning_count = process_warnings()
    # add macOS updates to pending items count if macOS 10.14+ for log count
    if os_version_tuple >= (10, 14):
        pending_items += pending_apple_updates

    # Log status of run
    log_status(installed_items, removed_items, pending_items, warning_count)

    # Edit manifest leaving only items that have not installed yet
    if UPDATE_MANIFEST is True:
        update_client_manifest(jamjar_installs, jamjar_uninstalls)

    # Delete auth if set
    if DELETE_SECURE_AUTH is True:
        delete_auth()

    # If we have something to notify about, update inventory
    if installed_items != 0 or removed_items != 0:
        update_inventory()


def get_pending_items():
    ''' Return pending items '''

    pending_apple_updates = 0
    pending_items = 0

    # Get the pending updates from InstallInfo.plist if exists,
    # therefore not including pending macOS updates.
    # Borrowed from:
    # https://github.com/munki/munki/blob/master/code/client/munkilib/installinfo.py#L104-L106
    install_info_plist = '%s/InstallInfo.plist' % MANAGED_INSTALL_DIR
    if os.path.exists(install_info_plist):
        install_info = {}
        install_info = FoundationPlist.readPlist(install_info_plist)
        # Process pending as per below, h/t @TSPARR:
        # https://github.com/munki/munki/blob/master/code/client/munkilib/installinfo.py#L104-L106
        pending_items = (len(install_info['managed_installs']) +
                         len(install_info['removals']))

    # Get the pending updates from AppleUpdates.plist if exists.
    apple_updates_plist = '%s/%s' % (MANAGED_INSTALL_DIR, 'AppleUpdates.plist')
    if os.path.exists(apple_updates_plist):
        apple_updates = {}
        apple_updates = FoundationPlist.readPlist(apple_updates_plist)
        pending_apple_updates = len(apple_updates['AppleUpdates'])

    return pending_apple_updates, pending_items


def process_installs(jamjar_installs, installed_items):
    ''' Process Installs '''

    # Check to make sure that we have installs pending, notify if installed & remove
    # from jamjar_installs, & increment count
    # pylint: disable=too-many-nested-blocks
    if jamjar_installs:
        if MANAGED_INSTALL_REPORT.get('InstallResults'):
            for item in MANAGED_INSTALL_REPORT.get('InstallResults'):
                if item['status'] == 0:
                    if item['name'] in jamjar_installs:
                        for _ in MANAGED_INSTALL_REPORT.get('ManagedInstalls'):
                            send_installed_notification(item['display_name'], item['version'])
                        jamjar_installs.remove(item['name'])
                        installed_items += 1

        # If Munki doesn't have a newer item, it can be found in InstalledItems.
        # Remove from jamjar_installs but do not notify
        if MANAGED_INSTALL_REPORT.get('InstalledItems'):
            for item in MANAGED_INSTALL_REPORT.get('InstalledItems'):
                if item in jamjar_installs:
                    jamjar_installs.remove(item)

    return (jamjar_installs, installed_items)


def process_uninstalls(jamjar_uninstalls, removed_items):
    ''' Process uninstalls'''

    # Check to make sure that we have uninstalls pending, if items uninstalled remove
    # from jamjar_uninstalls & increment removals
    if jamjar_uninstalls:
        if MANAGED_INSTALL_REPORT.get('RemovalResults'):
            for item in MANAGED_INSTALL_REPORT.get('RemovalResults'):
                if item['status'] == 0:
                    if item['name'] in jamjar_uninstalls:
                        jamjar_uninstalls.remove(item['name'])
                        removed_items += 1
        # If an item has otherwise been removed
        if MANAGED_INSTALL_REPORT.get('RemovedItems'):
            for item in MANAGED_INSTALL_REPORT.get('RemovedItems'):
                if item in jamjar_uninstalls:
                    jamjar_uninstalls.remove(item)
                    removed_items += 1

    return (jamjar_uninstalls, removed_items)


def process_pending_apple_updates(pending_apple_updates):
    ''' Process pending Apple updates for macOS 10.14+ only '''

    # Get integer values of pending items in the uk.co.dataJAR.jamJAR plist
    last_apple_pending_count = CFPreferencesGetAppIntegerValue('apple_update_pending_count',
                                                               'uk.co.dataJAR.jamJAR', None)[0]

    # Only process if UnattendedAppleUpdates is set to true
    if CFPreferencesCopyAppValue('UnattendedAppleUpdates', 'ManagedInstalls'):
        # If we have more no pending updates & did last time, tidy up
        if pending_apple_updates == 0 and last_apple_pending_count > pending_apple_updates:
            send_pending_apple_update_notification(True)
        # If we have more pending updates than last run or we have pending updates &
        # are using the dataJAR Notifier, post notification
        if (pending_apple_updates > last_apple_pending_count or
                pending_apple_updates > 0 and DATAJAR_NOTIFIER and not DATAJAR_NOTIFIER_LEGACY_MODE):
            send_pending_apple_update_notification(False)

    # Update pending_count in /Library/Preferences/uk.co.dataJAR.jamJAR.plist
    CFPreferencesSetValue('apple_update_pending_count', pending_apple_updates,
                          'uk.co.dataJAR.jamJAR', kCFPreferencesAnyUser,
                          kCFPreferencesAnyHost)


def process_pending(pending_items):
    ''' Process pending '''

    # The username of the logged in user
    username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]

    #pylint: disable =consider-using-in
    if username == "" or username == "loginwindow":
        username = None

    # Get the count of pending items from last run
    last_pending_count = CFPreferencesGetAppIntegerValue('pending_count',
                                                         'uk.co.dataJAR.jamJAR', None)[0]

    # If we have more pending updates than last run
    if pending_items > last_pending_count:
        send_pending_notification(False)
        if not os.path.exists('/private/tmp/com.googlecode.munki.installatlogout'):
            open('/private/tmp/com.googlecode.munki.installatlogout', 'w').close()
    # If we have more no pending updates & did last time, tidy up
    elif pending_items == 0 and last_pending_count > pending_items:
        time.sleep(10)
        send_pending_notification(True)
        if os.path.exists('/private/tmp/com.googlecode.munki.installatlogout'):
            os.unlink('/private/tmp/com.googlecode.munki.installatlogout')
    # If we have more no pending updates, tidy up
    elif pending_items == 0:
        if os.path.exists('/private/tmp/com.googlecode.munki.installatlogout'):
            os.unlink('/private/tmp/com.googlecode.munki.installatlogout')
    # If we have pending updates & are using the dataJAR Notifier and we're logged in,
    # then post a notification
    elif (pending_items > 0 and DATAJAR_NOTIFIER and not DATAJAR_NOTIFIER_LEGACY_MODE) and username:
        send_pending_notification(False)
        if not os.path.exists('/private/tmp/com.googlecode.munki.installatlogout'):
            open('/private/tmp/com.googlecode.munki.installatlogout', 'w').close()
    # Create munki trigger file as we have pending items
    else:
        if username:
            if not os.path.exists('/private/tmp/com.googlecode.munki.installatlogout'):
                open('/private/tmp/com.googlecode.munki.installatlogout', 'w').close()

    # Update pending_count in /Library/Preferences/uk.co.dataJAR.jamJAR.plist
    CFPreferencesSetValue('pending_count', pending_items, 'uk.co.dataJAR.jamJAR',
                          kCFPreferencesAnyUser, kCFPreferencesAnyHost)


def process_warnings():
    ''' Return number of warnings '''

    return len(MANAGED_INSTALL_REPORT.get('Warnings', []))


def send_installed_notification(item_display_name, item_version):
    '''Check if the defined notifier app exists, & some is logged in
       before trying to send a notification. Only sent when installed '''

    # The username of the logged in user
    username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]

    #pylint: disable =consider-using-in
    if username == "" or username == "loginwindow":
        username = None

    if os.path.exists(NOTIFIER_PATH) and username:
        #    item_name  - example: OracleJava8
        #    item_display_name - example: Oracle Java 8
        #    item_version - example: 1.8.111.14
        if DATAJAR_NOTIFIER and sys.argv[1] != 'manualcheck':
            notifier_args = ['/usr/bin/su', '-l', username, '-c', '"{0}" --messageaction "{1}" \
        --message "{2}" --title "{3}" --type banner'.format(NOTIFIER_PATH, NOTIFIER_SENDER_ID, \
      NOTIFIER_MSG_INSTALLED % (item_display_name, item_version.strip()), NOTIFIER_MSG_TITLE)]
        else:
            notifier_args = ['/usr/bin/su', '-l', username, '-c', '"{0}" -sender "{1}" \
                -message "{2}" -title "{3}"'.format(NOTIFIER_PATH, NOTIFIER_SENDER_ID, \
                                          NOTIFIER_MSG_INSTALLED % (item_display_name, \
                                           item_version.strip()), NOTIFIER_MSG_TITLE)]

        # Send notification
        subprocess.call(notifier_args, close_fds=True)


def send_pending_apple_update_notification(clear_prior_msg):
    '''Check if the defined notifier app exists, & some is logged in
       before trying to send a notification. Only sent when something pending '''

    username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]

    #pylint: disable =consider-using-in
    if username == "" or username == "loginwindow":
        username = None

    if os.path.exists(NOTIFIER_PATH) and username:
        #    item_name  - example: OracleJava8
        #    item_display_name - example: Oracle Java 8
        #    item_version - example: 1.8.111.14
        if DATAJAR_NOTIFIER:
            if clear_prior_msg:
                notifier_args = ['/usr/bin/su', '-l', username, '-c', '"{0}" --messageaction "{1}" \
                                        --message "{2}" --title "{3}" --type alert --remove prior' \
                                                        .format(NOTIFIER_PATH, NOTIFIER_SENDER_ID, \
                                               NOTIFIER_MSG_OSUPDATESPENDING, NOTIFIER_MSG_TITLE)]
                # Clear prior message
                subprocess.call(notifier_args, close_fds=True)
            else:
                notifier_args = ['/usr/bin/su', '-l', username, '-c', '"{0}" --messageaction "{1}" \
                                                       --message "{2}" --title "{3}" --type alert' \
                         .format(NOTIFIER_PATH, NOTIFIER_SENDER_ID, NOTIFIER_MSG_OSUPDATESPENDING, \
                                                                              NOTIFIER_MSG_TITLE)]
        else:
            notifier_args = ['/usr/bin/su', '-l', username, '-c', '"{0}" -sender "{1}" \
                -message "{2}" -title "{3}"'.format(NOTIFIER_PATH, NOTIFIER_SENDER_ID, \
                                   NOTIFIER_MSG_OSUPDATESPENDING, NOTIFIER_MSG_TITLE)]

        # Send notification
        subprocess.call(notifier_args, close_fds=True)


def send_pending_notification(clear_prior_msg):
    '''Check if the defined notifier app exists, & some is logged in
       before trying to send a notification. Only sent when something pending '''

    username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]

    #pylint: disable =consider-using-in
    if username == "" or username == "loginwindow":
        username = None

    if os.path.exists(NOTIFIER_PATH) and username:
        #    item_name  - example: OracleJava8
        #    item_display_name - example: Oracle Java 8
        #    item_version - example: 1.8.111.14
        if DATAJAR_NOTIFIER:
            if clear_prior_msg:
                notifier_args = ['/usr/bin/su', '-l', username, '-c', '"{0}" --messageaction "{1}" \
     --message "{2}" --title "{3}" --type alert --messagebutton "{4}" --messagebuttonaction logout \
                   --remove prior'.format(NOTIFIER_PATH, NOTIFIER_SENDER_ID, NOTIFIER_MSG_PENDING, \
                                              NOTIFIER_MSG_TITLE, DATAJAR_NOTIFIER_LOGOUT_BUTTON)]
                # Clear prior message
                subprocess.call(notifier_args, close_fds=True)
                notifier_args = ['/usr/bin/su', '-l', username, '-c', '"{0}" --messageaction "{1}" \
                                                      --message "{2}" --title "{3}" --type banner' \
           .format(NOTIFIER_PATH, NOTIFIER_SENDER_ID, NOTIFIER_MSG_NOPENDING, NOTIFIER_MSG_TITLE)]
            else:
                notifier_args = ['/usr/bin/su', '-l', username, '-c', '"{0}" --messageaction "{1}" \
    --message "{2}" --title "{3}" --type alert --messagebutton "{4}" --messagebuttonaction logout' \
                                  .format(NOTIFIER_PATH, NOTIFIER_SENDER_ID, NOTIFIER_MSG_PENDING, \
                                              NOTIFIER_MSG_TITLE, DATAJAR_NOTIFIER_LOGOUT_BUTTON)]
        else:
            notifier_args = ['/usr/bin/su', '-l', username, '-c', '"{0}" -sender "{1}" \
                -message "{2}" -title "{3}"'.format(NOTIFIER_PATH, NOTIFIER_SENDER_ID, \
                                            NOTIFIER_MSG_PENDING, NOTIFIER_MSG_TITLE)]

        # Send notification
        subprocess.call(notifier_args, close_fds=True)


def log_status(installed_items, removed_items, pending_items, warning_count):
    ''' It's big it's heavy it's wood...'''

    logging.info('%s installed, %s removed, %s pending, %s warnings', installed_items,
                 removed_items, pending_items, warning_count)


def update_client_manifest(jamjar_installs, jamjar_uninstalls):
    ''' Update manifest, leaving only items that have not installed/uninstalled yet'''

    updated_client_manifest = {}
    updated_client_manifest['managed_installs'] = jamjar_installs
    updated_client_manifest['managed_uninstalls'] = jamjar_uninstalls
    FoundationPlist.writePlist(updated_client_manifest, '%s/manifests/%s' %
                               (MANAGED_INSTALL_DIR, MANIFEST))

def delete_auth():
    ''' Delete the AdditionalHttpHeaders key in
        /private/var/root/Library/Preferences/ManagedInstalls.plist '''

    CFPreferencesSetAppValue('AdditionalHttpHeaders', None, 'ManagedInstalls')
    CFPreferencesAppSynchronize('ManagedInstalls')


def update_inventory():
    ''' If we have something to notify about, are not in Munki mode &
        have a jamf binary, update inventory '''

    cmd = ['/usr/local/jamf/bin/jamf', 'recon']
    subprocess.call(cmd, stdout=open(os.devnull, 'wb'))


if __name__ == "__main__":

    # Make sure we're root
    if os.geteuid() != 0:
        print('Error: This script must be run as root')
        sys.exit(1)

    # Try to locate jamf binary
    if not os.path.exists('/usr/local/jamf/bin/jamf'):
        logging.error('Cannot find jamf binary')
        sys.exit(1)

    # Retrieve values for the below keys. If not set, set to defaults
    LOG_FILE_DIR = CFPreferencesCopyAppValue('log_file_dir', 'uk.co.dataJAR.jamJAR')
    if LOG_FILE_DIR is None:
        LOG_FILE_DIR = '/var/log/'

    # Create LOG_FILE_DIR if doesn't exist
    if not os.path.exists(LOG_FILE_DIR):
        os.makedirs(LOG_FILE_DIR)

    LOG_FILE_NAME = CFPreferencesCopyAppValue('log_file_name', 'uk.co.dataJAR.jamJAR')
    if LOG_FILE_NAME is None:
        LOG_FILE_NAME = 'jamJAR'

    # Configure logging to a file
    LOGGER = logging.getLogger()
    LOGGER.setLevel(logging.INFO)
    HANDLER = logging.handlers.RotatingFileHandler(os.path.join(LOG_FILE_DIR,
                                                                LOG_FILE_NAME + '.log'),
                                                   mode='a', maxBytes=10000000, backupCount=1)
    FORMATTER = logging.Formatter('%(asctime)s %(levelname)s %(message)s',
                                  datefmt='%Y-%m-%d %H:%M:%S')
    HANDLER.setFormatter(FORMATTER)
    LOGGER.addHandler(HANDLER)

    # Import FoundationPlist from munki, exit if errors
    sys.path.append("/usr/local/munki")
    try:
        from munkilib import FoundationPlist
    except ImportError:
        logging.error('Cannot import FoundationPlist')
        sys.exit(1)

    DATAJAR_NOTIFIER = CFPreferencesCopyAppValue('datajar_notifier', 'uk.co.dataJAR.jamJAR')
    if DATAJAR_NOTIFIER is None:
        DATAJAR_NOTIFIER = False

    DATAJAR_NOTIFIER_LEGACY_MODE = CFPreferencesCopyAppValue('datajar_notifier_legacy_mode', 'uk.co.dataJAR.jamJAR')
    if DATAJAR_NOTIFIER_LEGACY_MODE is None:
        DATAJAR_NOTIFIER_LEGACY_MODE = False

    DATAJAR_NOTIFIER_LOGOUT_BUTTON = CFPreferencesCopyAppValue('datajar_notifier_logout_button', \
                                                                         'uk.co.dataJAR.jamJAR')
    if DATAJAR_NOTIFIER_LOGOUT_BUTTON is None:
        DATAJAR_NOTIFIER_LOGOUT_BUTTON = 'Logout'

    DELETE_SECURE_AUTH = CFPreferencesCopyAppValue('delete_secure_auth', 'uk.co.dataJAR.jamJAR')
    if DELETE_SECURE_AUTH is None:
        DELETE_SECURE_AUTH = False

    NOTIFIER_MSG_INSTALLED = CFPreferencesCopyAppValue('notifier_msg_installed',
                                                       'uk.co.dataJAR.jamJAR')
    if NOTIFIER_MSG_INSTALLED is None:
        NOTIFIER_MSG_INSTALLED = '%s %s has been installed'

    NOTIFIER_MSG_NOPENDING = CFPreferencesCopyAppValue('notifier_msg_nopending',
                                                       'uk.co.dataJAR.jamJAR')
    if NOTIFIER_MSG_NOPENDING is None:
        NOTIFIER_MSG_NOPENDING = 'No updates pending'

    NOTIFIER_MSG_OSUPDATESPENDING = CFPreferencesCopyAppValue('notifier_msg_osupdatespending', \
                                                                       'uk.co.dataJAR.jamJAR')
    if NOTIFIER_MSG_OSUPDATESPENDING is None:
        NOTIFIER_MSG_OSUPDATESPENDING = 'macOS Updates available. Click here for more details'

    NOTIFIER_MSG_PENDING = CFPreferencesCopyAppValue('notifier_msg_pending', 'uk.co.dataJAR.jamJAR')
    if NOTIFIER_MSG_PENDING is None:
        NOTIFIER_MSG_PENDING = 'Logout to complete pending updates'

    NOTIFIER_MSG_TITLE = CFPreferencesCopyAppValue('notifier_msg_title', 'uk.co.dataJAR.jamJAR')

    if NOTIFIER_MSG_TITLE is None:
        NOTIFIER_MSG_TITLE = 'jamJAR'

    NOTIFIER_PATH = CFPreferencesCopyAppValue('notifier_path', 'uk.co.dataJAR.jamJAR')
    if NOTIFIER_PATH is None:
        NOTIFIER_PATH = '/Library/Application Support/JAMF/bin/Management ' \
                        'Action.app/Contents/MacOS/Management Action'

    NOTIFIER_SENDER_ID = CFPreferencesCopyAppValue('notifier_sender_id', 'uk.co.dataJAR.jamJAR')
    if NOTIFIER_SENDER_ID is None:
        NOTIFIER_SENDER_ID = 'com.jamfsoftware.selfservice'

#    NO_MSG_CATEGORY = CFPreferencesCopyAppValue('no_msg_category', 'uk.co.dataJAR.jamJAR')
#    if NO_MSG_CATEGORY is None:
#        NO_MSG_CATEGORY = ''

    # Get location of the Managed Installs directory, exit if not found
    MANAGED_INSTALL_DIR = CFPreferencesCopyAppValue('ManagedInstallDir', 'ManagedInstalls')
    if MANAGED_INSTALL_DIR is None:
        logging.error('Cannot get Managed Installs directory...')
        sys.exit(1)

    # Check if ManagedInstallReport exists
    INSTALL_REPORT_PLIST = '%s/ManagedInstallReport.plist' % MANAGED_INSTALL_DIR
    if not os.path.exists(INSTALL_REPORT_PLIST):
        logging.warning('ManagedInstallReport is missing')
        sys.exit(0)
    else:
        MANAGED_INSTALL_REPORT = {}
        MANAGED_INSTALL_REPORT = FoundationPlist.readPlist(INSTALL_REPORT_PLIST)

    # Make sure a LocalOnlyManifest is specified, then grab the name
    MANIFEST = CFPreferencesCopyAppValue('LocalOnlyManifest', 'ManagedInstalls')

    # Some vars for tings & junk
    CLIENT_MANIFEST = {}
    UPDATE_MANIFEST = True

    # If no LocalOnlyManifest, then look for CLIENT_MANIFEST. Try to read it. Error
    # out if cannot
    if MANIFEST is None:
        MANIFEST = '%s/manifests/%s' % (MANAGED_INSTALL_DIR, 'CLIENT_MANIFEST.plist')
        UPDATE_MANIFEST = False
        if not os.path.exists(MANIFEST):
            logging.error('Cannot find any client manifests')
            sys.exit(1)
        else:
            try:
                CLIENT_MANIFEST = FoundationPlist.readPlist('%s/manifests/%s' %
                                                            (MANAGED_INSTALL_DIR,
                                                             'CLIENT_MANIFEST.plist'))
            except FoundationPlist.NSPropertyListSerializationException:
                logging.error('Cannot read any client manifests')
                sys.exit(1)
    # If LocalOnlyManifest is declared, but does not exist exit.
    elif MANIFEST is not None and not os.path.exists('%s/manifests/%s' %
                                                     (MANAGED_INSTALL_DIR, MANIFEST)):
        logging.warning('LocalOnlyManifest (%s) declared, but is missing', MANIFEST)
        sys.exit(0)
    else:
        # If LocalOnlyManifest exists, try to read it
        try:
            CLIENT_MANIFEST = FoundationPlist.readPlist('%s/manifests/%s' %
                                                        (MANAGED_INSTALL_DIR, MANIFEST))
        except FoundationPlist.NSPropertyListSerializationException:
            logging.error('Cannot read LocalOnlyManifest')
            sys.exit(1)

    # Gimme some main
    main()
